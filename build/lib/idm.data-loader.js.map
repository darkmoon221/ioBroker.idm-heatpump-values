{
  "version": 3,
  "sources": ["../../src/lib/idm.data-loader.ts"],
  "sourcesContent": ["import axios from 'axios';\r\nimport * as crypto from 'crypto';\r\nimport {IdmHeatpumpValues} from '../main.js';\r\n\r\n\r\ninterface GraphData {\r\n  name: string,\r\n  values: any[]\r\n}\r\n\r\nexport class IdmDataLoader {\r\n\r\n  private readonly adapter: IdmHeatpumpValues;\r\n\r\n  private readonly idmHost = 'https://www.myidm.at';\r\n\r\n  // private readonly nav20Host = 'https://nav20.myidm.at';\r\n\r\n  private localIdmUrl?: string;\r\n  private pin?: string;\r\n\r\n  private token?: string;\r\n\r\n  private id?: string;\r\n\r\n  private idmId?: string;\r\n\r\n  private csrfToken?: string;\r\n\r\n  constructor(idmDataLoader: IdmHeatpumpValues) {\r\n    this.adapter = idmDataLoader;\r\n  }\r\n\r\n  public async login(localIdmUrl: string, pin: string, username: string, password: string): Promise<void> {\r\n    this.adapter.log.info('Login to idm portal');\r\n\r\n    this.localIdmUrl = localIdmUrl;\r\n    this.pin = pin;\r\n\r\n    const data = {\r\n      'username': username,\r\n      'password': this.encode(password)\r\n    };\r\n\r\n    const loginConfig = {\r\n      method: 'post',\r\n      url: this.idmHost + '/api/user/login',\r\n      headers: {\r\n        'User-Agent': 'IDM App (Android)',\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      },\r\n      data: data\r\n    };\r\n\r\n    try {\r\n      const loginResponse = await axios(loginConfig);\r\n\r\n      if (loginResponse.status === 200) {\r\n        this.token = loginResponse.data['token'];\r\n        this.id = loginResponse.data['installations'][0]['id'];\r\n        this.idmId = this.parseIdmId(loginResponse.headers);\r\n\r\n        this.adapter.log.debug('Data from login: (Token, Id, IdmId): ' + this.token + ', ' + this.id + ', ' + this.idmId);\r\n\r\n      } else {\r\n        this.adapter.log.error('IDM Portal login failed: ' + loginResponse.statusText + ', Check your credentials');\r\n        this.adapter.setState('info.connection', false, true);\r\n      }\r\n\r\n    } catch (error) {\r\n      this.adapter.log.error('IDM Portal login failed: ' + error);\r\n      this.adapter.setState('info.connection', false, true);\r\n    }\r\n  }\r\n\r\n  public async localLogin(localIdmUrl: string, pin: string,): Promise<void> {\r\n    this.adapter.log.info('Login to local idm portal');\r\n\r\n    this.localIdmUrl = localIdmUrl;\r\n    this.pin = pin;\r\n\r\n    const localLoginData = {\r\n      'pin': this.pin\r\n    };\r\n\r\n    // Request one: Get the 'MYIDM' Id\r\n    const getIdmIdConfig = {\r\n      method: 'post',\r\n      url: this.localIdmUrl + '/index.php',\r\n      headers: {\r\n        'User-Agent': 'IDM App (Android)',\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      maxRedirects: 0 // Do not redirect, need the cookie header of the response\r\n    };\r\n\r\n    try {\r\n      await axios(getIdmIdConfig);\r\n    } catch (error: any) {\r\n      this.idmId = this.parseIdmId(error.response.headers);\r\n    }\r\n\r\n    // Request two: Login to get the csrf token\r\n    const localLoginConfig = {\r\n      method: 'post',\r\n      url: this.localIdmUrl + '/index.php',\r\n      headers: {\r\n        'User-Agent': 'IDM App (Android)',\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Cookie': this.idmId\r\n      },\r\n      data: localLoginData\r\n    };\r\n\r\n    try {\r\n      const csrfResponse = await axios(localLoginConfig);\r\n      this.csrfToken = this.getCsrfToken(csrfResponse.data);\r\n      this.adapter.log.debug('Parsed csrf-token: ' + this.csrfToken);\r\n    } catch (error) {\r\n      this.adapter.log.error('Could not parse csrf-token' + error);\r\n      this.adapter.setState('info.connection', false, true);\r\n    }\r\n  }\r\n\r\n  public async getEnergyData(): Promise<void> {\r\n    const dataConfig = {\r\n      method: 'get',\r\n      url: this.localIdmUrl + '/data/statistics.php?type=baenergyhp',\r\n      headers: {\r\n        'Cookie': this.idmId,\r\n        'CSRF-Token': this.csrfToken\r\n      }\r\n    };\r\n\r\n    try {\r\n      const dataResponse = await axios(dataConfig);\r\n      this.adapter.log.debug('Data response: ' + JSON.stringify(dataResponse.data).substring(0, 100));\r\n\r\n      await this.adapter.setStateAsync('system.energy-consumption', {val: JSON.stringify(dataResponse.data), ack: true});\r\n\r\n      await this.createJsonGraph(JSON.stringify(dataResponse.data));\r\n\r\n    } catch (error) {\r\n      this.adapter.log.error('Could not load energy data: ' + error);\r\n      this.adapter.setState('info.connection', false, true);\r\n    }\r\n  }\r\n\r\n  private getCsrfToken(input: string): string {\r\n    const regexp: RegExp = new RegExp('(csrf_token)(=)(\")([a-z0-9]*)(\")');\r\n    return regexp.exec(input)![4];\r\n  }\r\n\r\n  private encode = (input: string): string => {\r\n    return crypto.createHash('sha1').update(input, 'binary').digest('hex');\r\n  };\r\n\r\n  private parseIdmId = (headers: any): string => {\r\n    const regex = new RegExp('(MYIDM=)([^;]+)(;)');\r\n    return regex.exec(headers['set-cookie'][0])![0];\r\n  };\r\n\r\n  private async createJsonGraph(input: any): Promise<void> {\r\n\r\n    const json = JSON.parse(input);\r\n    const data = json['data'];\r\n    const daily = data['daily'];\r\n\r\n    const result: GraphData[] = [];\r\n\r\n    for (const entry of daily) {\r\n      const name = entry['name'];\r\n      const values = entry['values'];\r\n\r\n      result.push({name, values});\r\n    }\r\n\r\n    const heating = result.map(e => e.values[0]).map(x => x[0]).map(v => Math.round(v * 10) / 10);\r\n    const water = result.map(e => e.values[0]).map(x => x[1]).map(v => Math.round(v * 10) / 10);\r\n    const defrost = result.map(e => e.values[0]).map(x => x[2]).map(v => Math.round(v * 10) / 10);\r\n    const colors = json['items'][0].map((x: any) => x.color);\r\n\r\n    const graph = {\r\n      'axisLabels': result.map(e => e.name),\r\n      'graphs': [\r\n        {\r\n          'type': 'bar',\r\n          'barIsStacked': true,\r\n          'data': heating,\r\n          'yAxis_id': 0,\r\n          'barStackId': 1,\r\n          'color': colors[0],\r\n          'datalabel_color': '#000000',\r\n          'datalabel_align': 'start'\r\n        },\r\n        {\r\n          'type': 'bar',\r\n          'barIsStacked': true,\r\n          'data': water,\r\n          'yAxis_id': 0,\r\n          'barStackId': 1,\r\n          'color': colors[1],\r\n          'datalabel_color': '#000000',\r\n          'datalabel_align': 'start'\r\n        },\r\n        {\r\n          'type': 'bar',\r\n          'barIsStacked': true,\r\n          'data': defrost,\r\n          'yAxis_id': 0,\r\n          'barStackId': 1,\r\n          'color': '#e8d73e',\r\n          'datalabel_color': '#000000',\r\n          'datalabel_align': 'start'\r\n        }\r\n      ]\r\n    };\r\n    await this.adapter.setStateAsync('graph.energy-consumption', {val: JSON.stringify(graph), ack: true});\r\n  }\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios"]
}
