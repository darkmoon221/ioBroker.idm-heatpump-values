{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport {IdmDataLoader} from './lib/idm.data-loader.js';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nexport class IdmHeatpumpValues extends utils.Adapter {\n\n  private idmDataLoader?: IdmDataLoader;\n\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'idm-heatpump-values',\n    });\n    this.on('ready', this.onReady.bind(this));\n    this.on('stateChange', this.onStateChange.bind(this));\n    // this.on('objectChange', this.onObjectChange.bind(this));\n    // this.on('message', this.onMessage.bind(this));\n    this.on('unload', this.onUnload.bind(this));\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    // Initialize your adapter here\n\n    // Reset the connection indicator during startup\n    this.setState('info.connection', false, true);\n\n    // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n    // this.config:\n    this.log.info('config local IDM URL: ' + this.config.localIdmUrl);\n    this.log.info('config username: ' + this.config.username);\n    this.log.info('config password: ***');\n\n    /*\n    For every state in the system there has to be also an object of type state\n    Here a simple template for a boolean variable named \"testVariable\"\n    Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n    */\n    await this.setObjectNotExistsAsync('system.energy-consumption', {\n      type: 'state',\n      common: {\n        name: 'energy-consumption',\n        type: 'object',\n        role: 'variable',\n        read: true,\n        write: true,\n      },\n      native: {}\n    });\n\n    await this.setObjectNotExistsAsync('graph.energy-consumption', {\n      type: 'state',\n      common: {\n        name: 'energy-consumption',\n        type: 'object',\n        role: 'variable',\n        read: true,\n        write: true,\n      },\n      native: {}\n    });\n\n    this.idmDataLoader = new IdmDataLoader(this);\n    // await this.idmDataLoader?.login(this.config.localIdmUrl, this.config.pin, this.config.username, this.config.password);\n    await this.idmDataLoader?.localLogin(this.config.localIdmUrl, this.config.pin);\n    await this.idmDataLoader?.getEnergyData();\n\n    this.setTimeout(async () => {\n      // await this.idmDataLoader?.login(this.config.localIdmUrl, this.config.pin, this.config.username, this.config.password);\n      await this.idmDataLoader?.localLogin(this.config.localIdmUrl, this.config.pin);\n      await this.idmDataLoader?.getEnergyData();\n    }, 5 * 60 * 1000);\n\n    // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n    // this.subscribeStates('testVariable');\n    // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n    // this.subscribeStates('lights.*');\n    // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n    // this.subscribeStates('*');\n\n    /*\n        setState examples\n        you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n    */\n    // the variable testVariable is set to true as command (ack=false)\n    // await this.setStateAsync('testVariable', true);\n\n    // same thing, but the value is flagged \"ack\"\n    // ack should be always set to true if the value is received from or acknowledged from the target system\n    // await this.setStateAsync('testVariable', {val: true, ack: true});\n\n    // same thing, but the state is deleted after 30s (getState will return null afterwards)\n    // await this.setStateAsync('testVariable', {val: true, ack: true, expire: 30});\n\n    // examples for the checkPassword/checkGroup functions\n    // let result = await this.checkPasswordAsync('admin', 'iobroker');\n    // this.log.info('check user admin pw iobroker: ' + result);\n\n    // result = await this.checkGroupAsync('admin', 'admin');\n    // this.log.info('check group user admin group admin: ' + result);\n\n    this.setState('info.connection', true, true);\n  }\n\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  private onUnload(callback: () => void): void {\n    try {\n      // Here you must clear all timeouts or intervals that may still be active\n      // clearTimeout(timeout1);\n      // clearTimeout(timeout2);\n      // ...\n      // clearInterval(interval1);\n\n      callback();\n    } catch (e) {\n      callback();\n    }\n  }\n\n  // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n  // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n  // /**\n  //  * Is called if a subscribed object changes\n  //  */\n  // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n  //     if (obj) {\n  //         // The object was changed\n  //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n  //     } else {\n  //         // The object was deleted\n  //         this.log.info(`object ${id} deleted`);\n  //     }\n  // }\n\n  /**\n   * Is called if a subscribed state changes\n   */\n  private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    if (state) {\n      // The state was changed\n      this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n    } else {\n      // The state was deleted\n      this.log.info(`state ${id} deleted`);\n    }\n  }\n\n  // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n  // /**\n  //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n  //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n  //  */\n  // private onMessage(obj: ioBroker.Message): void {\n  //     if (typeof obj === 'object' && obj.message) {\n  //         if (obj.command === 'send') {\n  //             // e.g. send email or pushover or whatever\n  //             this.log.info('send command');\n\n  //             // Send response in callback if required\n  //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n  //         }\n  //     }\n  // }\n\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new IdmHeatpumpValues(options);\n} else {\n  // otherwise start the instance directly\n  (() => new IdmHeatpumpValues())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,YAAuB;AACvB,6BAA4B;AAKrB,MAAM,0BAA0B,MAAM,QAAQ;AAAA,EAI5C,YAAY,UAAyC,CAAC,GAAG;AAC9D,UAAM;AAAA,MACJ,GAAG;AAAA,MACH,MAAM;AAAA,IACR,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC5C;AAAA,EAKA,MAAc,UAAyB;AA/BzC;AAmCI,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAI5C,SAAK,IAAI,KAAK,2BAA2B,KAAK,OAAO,WAAW;AAChE,SAAK,IAAI,KAAK,sBAAsB,KAAK,OAAO,QAAQ;AACxD,SAAK,IAAI,KAAK,sBAAsB;AAOpC,UAAM,KAAK,wBAAwB,6BAA6B;AAAA,MAC9D,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,MACA,QAAQ,CAAC;AAAA,IACX,CAAC;AAED,UAAM,KAAK,wBAAwB,4BAA4B;AAAA,MAC7D,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,MACA,QAAQ,CAAC;AAAA,IACX,CAAC;AAED,SAAK,gBAAgB,IAAI,qCAAc,IAAI;AAE3C,YAAM,UAAK,kBAAL,mBAAoB,WAAW,KAAK,OAAO,aAAa,KAAK,OAAO;AAC1E,YAAM,UAAK,kBAAL,mBAAoB;AAE1B,SAAK,WAAW,YAAY;AA7EhC,UAAAA,KAAAC;AA+EM,cAAMD,MAAA,KAAK,kBAAL,gBAAAA,IAAoB,WAAW,KAAK,OAAO,aAAa,KAAK,OAAO;AAC1E,cAAMC,MAAA,KAAK,kBAAL,gBAAAA,IAAoB;AAAA,IAC5B,GAAG,IAAI,KAAK,GAAI;AA8BhB,SAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,EAC7C;AAAA,EAKQ,SAAS,UAA4B;AAC3C,QAAI;AAOF,eAAS;AAAA,IACX,SAAS,GAAP;AACA,eAAS;AAAA,IACX;AAAA,EACF;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAChF,QAAI,OAAO;AAET,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACxE,OAAO;AAEL,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACrC;AAAA,EACF;AAmBF;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE3B,SAAO,UAAU,CAAC,YAAuD,IAAI,kBAAkB,OAAO;AACxG,OAAO;AAEL,GAAC,MAAM,IAAI,kBAAkB,GAAG;AAClC;",
  "names": ["_a", "_b"]
}
