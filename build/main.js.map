{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.3.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport {IdmDataLoader} from './lib/idm.data-loader.js';\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nclass IdmHeatPumpValues extends utils.Adapter {\r\n\r\n  private idmDataLoader?: IdmDataLoader;\r\n\r\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n    super({\r\n      ...options,\r\n      name: 'idm-heatpump-values',\r\n    });\r\n    this.on('ready', this.onReady.bind(this));\r\n    this.on('stateChange', this.onStateChange.bind(this));\r\n    // this.on('objectChange', this.onObjectChange.bind(this));\r\n    // this.on('message', this.onMessage.bind(this));\r\n    this.on('unload', this.onUnload.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Is called when databases are connected and adapter received configuration.\r\n   */\r\n  private async onReady(): Promise<void> {\r\n    // Initialize your adapter here\r\n\r\n    // Reset the connection indicator during startup\r\n    this.setState('info.connection', false, true);\r\n\r\n    // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n    // this.config:\r\n    this.log.info('config local IDM URL: ' + this.config.localIdmUrl);\r\n\r\n    /*\r\n    For every state in the system there has to be also an object of type state\r\n    Here a simple template for a boolean variable named \"testVariable\"\r\n    Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n    */\r\n    await this.setObjectNotExistsAsync('system.energy-consumption', {\r\n      type: 'state',\r\n      common: {\r\n        name: 'energy-consumption',\r\n        type: 'object',\r\n        role: 'variable',\r\n        read: true,\r\n        write: true,\r\n      },\r\n      native: {}\r\n    });\r\n\r\n    await this.setObjectNotExistsAsync('graph.energy-consumption', {\r\n      type: 'state',\r\n      common: {\r\n        name: 'energy-consumption',\r\n        type: 'object',\r\n        role: 'variable',\r\n        read: true,\r\n        write: true,\r\n      },\r\n      native: {}\r\n    });\r\n\r\n    this.idmDataLoader = new IdmDataLoader(this);\r\n    // await this.idmDataLoader?.login(this.config.localIdmUrl, this.config.pin, this.config.username, this.config.password);\r\n    await this.idmDataLoader?.localLogin(this.config.localIdmUrl, this.config.pin);\r\n    await this.idmDataLoader?.getEnergyData();\r\n\r\n    this.setInterval(async () => {\r\n      // await this.idmDataLoader?.login(this.config.localIdmUrl, this.config.pin, this.config.username, this.config.password);\r\n      await this.idmDataLoader?.localLogin(this.config.localIdmUrl, this.config.pin);\r\n      await this.idmDataLoader?.getEnergyData();\r\n    }, 5 * 60 * 1000);\r\n\r\n    // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n    // this.subscribeStates('testVariable');\r\n    // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n    // this.subscribeStates('lights.*');\r\n    // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n    // this.subscribeStates('*');\r\n\r\n    /*\r\n        setState examples\r\n        you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n    */\r\n    // the variable testVariable is set to true as command (ack=false)\r\n    // await this.setStateAsync('testVariable', true);\r\n\r\n    // same thing, but the value is flagged \"ack\"\r\n    // ack should be always set to true if the value is received from or acknowledged from the target system\r\n    // await this.setStateAsync('testVariable', {val: true, ack: true});\r\n\r\n    // same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n    // await this.setStateAsync('testVariable', {val: true, ack: true, expire: 30});\r\n\r\n    // examples for the checkPassword/checkGroup functions\r\n    // let result = await this.checkPasswordAsync('admin', 'iobroker');\r\n    // this.log.info('check user admin pw iobroker: ' + result);\r\n\r\n    // result = await this.checkGroupAsync('admin', 'admin');\r\n    // this.log.info('check group user admin group admin: ' + result);\r\n\r\n    this.setState('info.connection', true, true);\r\n  }\r\n\r\n  /**\r\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n   */\r\n  private onUnload(callback: () => void): void {\r\n    try {\r\n      // Here you must clear all timeouts or intervals that may still be active\r\n      // clearTimeout(timeout1);\r\n      // clearTimeout(timeout2);\r\n      // ...\r\n      // clearInterval(interval1);\r\n\r\n      callback();\r\n    } catch (e) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n  // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n  // /**\r\n  //  * Is called if a subscribed object changes\r\n  //  */\r\n  // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n  //     if (obj) {\r\n  //         // The object was changed\r\n  //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n  //     } else {\r\n  //         // The object was deleted\r\n  //         this.log.info(`object ${id} deleted`);\r\n  //     }\r\n  // }\r\n\r\n  /**\r\n   * Is called if a subscribed state changes\r\n   */\r\n  private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n    if (state) {\r\n      // The state was changed\r\n      this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n    } else {\r\n      // The state was deleted\r\n      this.log.info(`state ${id} deleted`);\r\n    }\r\n  }\r\n\r\n  // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n  // /**\r\n  //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n  //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n  //  */\r\n  // private onMessage(obj: ioBroker.Message): void {\r\n  //     if (typeof obj === 'object' && obj.message) {\r\n  //         if (obj.command === 'send') {\r\n  //             // e.g. send email or pushover or whatever\r\n  //             this.log.info('send command');\r\n\r\n  //             // Send response in callback if required\r\n  //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n  //         }\r\n  //     }\r\n  // }\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n  // Export the constructor in compact mode\r\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new IdmHeatPumpValues(options);\r\n} else {\r\n  // otherwise start the instance directly\r\n  (() => new IdmHeatPumpValues())();\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,6BAA4B;AAK5B,MAAM,0BAA0B,MAAM,QAAQ;AAAA,EAIrC,YAAY,UAAyC,CAAC,GAAG;AAC9D,UAAM;AAAA,MACJ,GAAG;AAAA,MACH,MAAM;AAAA,IACR,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC5C;AAAA,EAKA,MAAc,UAAyB;AA/BzC;AAmCI,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAI5C,SAAK,IAAI,KAAK,2BAA2B,KAAK,OAAO,WAAW;AAOhE,UAAM,KAAK,wBAAwB,6BAA6B;AAAA,MAC9D,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,MACA,QAAQ,CAAC;AAAA,IACX,CAAC;AAED,UAAM,KAAK,wBAAwB,4BAA4B;AAAA,MAC7D,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,MACA,QAAQ,CAAC;AAAA,IACX,CAAC;AAED,SAAK,gBAAgB,IAAI,qCAAc,IAAI;AAE3C,YAAM,UAAK,kBAAL,mBAAoB,WAAW,KAAK,OAAO,aAAa,KAAK,OAAO;AAC1E,YAAM,UAAK,kBAAL,mBAAoB;AAE1B,SAAK,YAAY,YAAY;AA3EjC,UAAAA,KAAAC;AA6EM,cAAMD,MAAA,KAAK,kBAAL,gBAAAA,IAAoB,WAAW,KAAK,OAAO,aAAa,KAAK,OAAO;AAC1E,cAAMC,MAAA,KAAK,kBAAL,gBAAAA,IAAoB;AAAA,IAC5B,GAAG,IAAI,KAAK,GAAI;AA8BhB,SAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,EAC7C;AAAA,EAKQ,SAAS,UAA4B;AAC3C,QAAI;AAOF,eAAS;AAAA,IACX,SAAS,GAAP;AACA,eAAS;AAAA,IACX;AAAA,EACF;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAChF,QAAI,OAAO;AAET,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACxE,OAAO;AAEL,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACrC;AAAA,EACF;AAmBF;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE3B,SAAO,UAAU,CAAC,YAAuD,IAAI,kBAAkB,OAAO;AACxG,OAAO;AAEL,GAAC,MAAM,IAAI,kBAAkB,GAAG;AAClC;",
  "names": ["_a", "_b"]
}
